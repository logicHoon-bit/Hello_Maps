{"codebase":{"name":"MapsTest","subfolders":[{"name":"MapsTestTests","files":[{"name":"MapsTestTests.swift","symbols":[{"range":{"start":{"line":10,"character":6},"end":{"line":35,"character":1}},"kind":5,"selectionRange":{"start":{"line":10,"character":12},"end":{"line":10,"character":25}},"name":"MapsTestTests","children":[{"range":{"start":{"line":12,"character":13},"end":{"line":14,"character":5}},"kind":6,"selectionRange":{"start":{"line":12,"character":18},"end":{"line":12,"character":34}},"name":"setUpWithError()"},{"range":{"start":{"line":16,"character":13},"end":{"line":18,"character":5}},"kind":6,"selectionRange":{"start":{"line":16,"character":18},"end":{"line":16,"character":37}},"name":"tearDownWithError()"},{"range":{"start":{"line":20,"character":4},"end":{"line":26,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":9},"end":{"line":20,"character":22}},"name":"testExample()"},{"range":{"start":{"line":28,"character":4},"end":{"line":33,"character":5}},"kind":6,"selectionRange":{"start":{"line":28,"character":9},"end":{"line":28,"character":33}},"name":"testPerformanceExample()"}]}],"code":"//\n//  MapsTestTests.swift\n//  MapsTestTests\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport XCTest\n@testable import MapsTest\n\nfinal class MapsTestTests: XCTestCase {\n\n    override func setUpWithError() throws {\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    override func tearDownWithError() throws {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n    }\n\n    func testExample() throws {\n        // This is an example of a functional test case.\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n        // Any test you write for XCTest can be annotated as throws and async.\n        // Mark your test throws to produce an unexpected failure when your test encounters an uncaught error.\n        // Mark your test async to allow awaiting for asynchronous code to complete. Check the results with assertions afterwards.\n    }\n\n    func testPerformanceExample() throws {\n        // This is an example of a performance test case.\n        self.measure {\n            // Put the code you want to measure the time of here.\n        }\n    }\n\n}\n"}]},{"name":"MapsTest","files":[{"name":"ViewController.swift","symbols":[{"range":{"start":{"line":11,"character":0},"end":{"line":104,"character":1}},"kind":5,"selectionRange":{"start":{"line":11,"character":6},"end":{"line":11,"character":20}},"name":"ViewController","children":[{"range":{"start":{"line":15,"character":4},"end":{"line":15,"character":45}},"kind":7,"selectionRange":{"start":{"line":15,"character":8},"end":{"line":15,"character":23}},"name":"locationManager"},{"range":{"start":{"line":16,"character":4},"end":{"line":16,"character":27}},"kind":7,"selectionRange":{"start":{"line":16,"character":8},"end":{"line":16,"character":15}},"name":"mapView"},{"range":{"start":{"line":17,"character":4},"end":{"line":17,"character":39}},"kind":7,"selectionRange":{"start":{"line":17,"character":8},"end":{"line":17,"character":18}},"name":"mapSegment"},{"range":{"start":{"line":18,"character":4},"end":{"line":18,"character":32}},"kind":7,"selectionRange":{"start":{"line":18,"character":8},"end":{"line":18,"character":21}},"name":"addAnnotation"},{"range":{"start":{"line":22,"character":13},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":22,"character":18},"end":{"line":22,"character":31}},"name":"viewDidLoad()"},{"range":{"start":{"line":33,"character":4},"end":{"line":38,"character":5}},"kind":6,"selectionRange":{"start":{"line":33,"character":9},"end":{"line":33,"character":29}},"name":"setLocationManager()"},{"range":{"start":{"line":42,"character":10},"end":{"line":53,"character":5}},"kind":6,"selectionRange":{"start":{"line":42,"character":15},"end":{"line":42,"character":59}},"name":"changedMapStyl(_:)"},{"range":{"start":{"line":55,"character":10},"end":{"line":62,"character":5}},"kind":6,"selectionRange":{"start":{"line":55,"character":15},"end":{"line":55,"character":43}},"name":"addAnnotationButtonPressed()","children":[{"range":{"start":{"line":56,"character":8},"end":{"line":56,"character":37}},"kind":13,"selectionRange":{"start":{"line":56,"character":12},"end":{"line":56,"character":22}},"name":"annotation"}]},{"range":{"start":{"line":64,"character":12},"end":{"line":94,"character":5}},"kind":6,"selectionRange":{"start":{"line":64,"character":17},"end":{"line":64,"character":67}},"name":"configureView(_:)","children":[{"range":{"start":{"line":66,"character":8},"end":{"line":66,"character":58}},"kind":13,"selectionRange":{"start":{"line":66,"character":12},"end":{"line":66,"character":24}},"name":"snapShotSize"},{"range":{"start":{"line":68,"character":8},"end":{"line":68,"character":53}},"kind":13,"selectionRange":{"start":{"line":68,"character":12},"end":{"line":68,"character":24}},"name":"snapShotView"},{"range":{"start":{"line":73,"character":8},"end":{"line":73,"character":48}},"kind":13,"selectionRange":{"start":{"line":73,"character":12},"end":{"line":73,"character":19}},"name":"options"},{"range":{"start":{"line":78,"character":8},"end":{"line":78,"character":60}},"kind":13,"selectionRange":{"start":{"line":78,"character":12},"end":{"line":78,"character":23}},"name":"snapshotter"},{"range":{"start":{"line":80,"character":19},"end":{"line":80,"character":24}},"kind":13,"selectionRange":{"start":{"line":80,"character":19},"end":{"line":80,"character":24}},"name":"error"},{"range":{"start":{"line":85,"character":19},"end":{"line":85,"character":27}},"kind":13,"selectionRange":{"start":{"line":85,"character":19},"end":{"line":85,"character":27}},"name":"snapshot"},{"range":{"start":{"line":86,"character":16},"end":{"line":86,"character":126}},"kind":13,"selectionRange":{"start":{"line":86,"character":20},"end":{"line":86,"character":29}},"name":"imageView"}]},{"range":{"start":{"line":96,"character":4},"end":{"line":102,"character":5}},"kind":6,"selectionRange":{"start":{"line":96,"character":9},"end":{"line":96,"character":74}},"name":"mapView(_:didDeselect:)"}]},{"range":{"start":{"line":108,"character":0},"end":{"line":110,"character":1}},"kind":3,"selectionRange":{"start":{"line":108,"character":10},"end":{"line":108,"character":24}},"name":"ViewController"},{"range":{"start":{"line":114,"character":0},"end":{"line":184,"character":1}},"kind":3,"selectionRange":{"start":{"line":114,"character":10},"end":{"line":114,"character":24}},"name":"ViewController","children":[{"range":{"start":{"line":123,"character":4},"end":{"line":149,"character":5}},"kind":6,"selectionRange":{"start":{"line":123,"character":9},"end":{"line":123,"character":72}},"name":"mapView(_:viewFor:)","children":[{"range":{"start":{"line":128,"character":8},"end":{"line":128,"character":123}},"kind":13,"selectionRange":{"start":{"line":128,"character":12},"end":{"line":128,"character":26}},"name":"annotationView"}]},{"range":{"start":{"line":151,"character":4},"end":{"line":181,"character":5}},"kind":6,"selectionRange":{"start":{"line":151,"character":9},"end":{"line":151,"character":72}},"name":"mapView(_:didSelect:)","children":[{"range":{"start":{"line":153,"character":18},"end":{"line":153,"character":28}},"kind":13,"selectionRange":{"start":{"line":153,"character":18},"end":{"line":153,"character":28}},"name":"annotation"},{"range":{"start":{"line":157,"character":8},"end":{"line":157,"character":58}},"kind":13,"selectionRange":{"start":{"line":157,"character":12},"end":{"line":157,"character":29}},"name":"customCalloutView"},{"range":{"start":{"line":170,"character":8},"end":{"line":170,"character":52}},"kind":13,"selectionRange":{"start":{"line":170,"character":12},"end":{"line":170,"character":22}},"name":"titleLabel"}]}]},{"range":{"start":{"line":188,"character":0},"end":{"line":213,"character":1}},"kind":3,"selectionRange":{"start":{"line":188,"character":10},"end":{"line":188,"character":24}},"name":"ViewController","children":[{"range":{"start":{"line":189,"character":4},"end":{"line":193,"character":5}},"kind":6,"selectionRange":{"start":{"line":189,"character":9},"end":{"line":189,"character":28}},"name":"configureSubviews()"},{"range":{"start":{"line":195,"character":4},"end":{"line":199,"character":5}},"kind":6,"selectionRange":{"start":{"line":195,"character":9},"end":{"line":195,"character":25}},"name":"createSubviews()"},{"range":{"start":{"line":201,"character":4},"end":{"line":205,"character":5}},"kind":6,"selectionRange":{"start":{"line":201,"character":9},"end":{"line":201,"character":22}},"name":"addSubviews()"},{"range":{"start":{"line":207,"character":4},"end":{"line":210,"character":5}},"kind":6,"selectionRange":{"start":{"line":207,"character":9},"end":{"line":207,"character":23}},"name":"setupLayouts()"}]},{"range":{"start":{"line":215,"character":0},"end":{"line":232,"character":1}},"kind":3,"selectionRange":{"start":{"line":215,"character":10},"end":{"line":215,"character":24}},"name":"ViewController","children":[{"range":{"start":{"line":216,"character":4},"end":{"line":229,"character":5}},"kind":6,"selectionRange":{"start":{"line":216,"character":9},"end":{"line":216,"character":31}},"name":"setupSubviewsLayouts()"}]},{"range":{"start":{"line":234,"character":0},"end":{"line":251,"character":1}},"kind":3,"selectionRange":{"start":{"line":234,"character":10},"end":{"line":234,"character":24}},"name":"ViewController","children":[{"range":{"start":{"line":235,"character":4},"end":{"line":249,"character":5}},"kind":6,"selectionRange":{"start":{"line":235,"character":9},"end":{"line":235,"character":35}},"name":"setupSubviewsConstraints()"}]}],"code":"//\n//  ViewController.swift\n//  MapsTest\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport UIKit\nimport MapKit\nimport CoreLocation\n\nclass ViewController: UIViewController {\n\n    //MARK: - Prooerties\n    \n    var locationManager = CLLocationManager()\n    var mapView: MKMapView!\n    var mapSegment: UISegmentedControl!\n    var addAnnotation: UIButton!\n    \n    //MARK: - LifeCycle\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        locationManager.delegate = self\n        locationManager.requestWhenInUseAuthorization()\n        setLocationManager()\n        \n        configureSubviews()\n    }\n\n    //MARK: setLocationManager\n    func setLocationManager() {\n        locationManager.desiredAccuracy = kCLLocationAccuracyBest\n        locationManager.distanceFilter = kCLDistanceFilterNone //업데이트를 위한 이동해야하는 최소거리, kCLDistanceFilterNone을 설정함으로서 위치가 변경될 때 마다 업데이트됨\n         \n        locationManager.startUpdatingLocation()\n    }\n    \n  //test  1\n    \n    @objc func changedMapStyl(_ sender: UISegmentedControl) {\n        switch sender.selectedSegmentIndex {\n        case 0:\n            self.mapView.mapType = .standard\n        case 1:\n            self.mapView.mapType = .satellite\n        case 2:\n            self.mapView.mapType = .hybrid\n        default:\n            self.mapView.mapType = .standard\n        }\n    }\n    \n    @objc func addAnnotationButtonPressed() {\n        let annotation = Annotation()\n        annotation.coordinate = CLLocationCoordinate2D(latitude:  36.3164, longitude: 127.4444)\n        annotation.title = \"My Annotatiom\"\n        annotation.subtitle = \"subtitle\"\n        //annotation.imageURL = \"pin@x3\"\n        mapView.addAnnotation(annotation)\n    }\n    \n    private func configureView(_ annotationView: MKAnnotationView?) {\n        \n        let snapShotSize = CGSize(width: 200, height: 200)\n        \n        let snapShotView = UIView(frame: CGRect.zero)\n        snapShotView.translatesAutoresizingMaskIntoConstraints = false\n        snapShotView.widthAnchor.constraint(equalToConstant: snapShotSize.width).isActive = true\n        snapShotView.heightAnchor.constraint(equalToConstant: snapShotSize.height).isActive = true\n        \n        let options = MKMapSnapshotter.Options()\n        options.size = snapShotSize\n        options.mapType = .satelliteFlyover\n        options.camera = MKMapCamera(lookingAtCenter: (annotationView?.annotation?.coordinate)!, fromDistance: 10, pitch: 65, heading: 0)\n        \n        let snapshotter = MKMapSnapshotter(options: options)\n        snapshotter.start { snapshot, error in\n            if let error = error {\n                print(error)\n                return\n            }\n            \n            if let snapshot = snapshot {\n                let imageView = UIImageView(frame: CGRect(x: 0, y: 0, width: snapShotSize.width, height: snapShotSize.height))\n                imageView.image = snapshot.image\n                snapShotView.addSubview(imageView)\n            }\n        }\n        \n        annotationView?.detailCalloutAccessoryView = snapShotView\n        \n    }\n    \n    func mapView(_ mapView: MKMapView, didDeselect view: MKAnnotationView) {\n        \n        view.subviews.forEach { subView in\n            subView.removeFromSuperview()\n        }\n        \n    }\n    \n}\n\n//MARK: - CLLocationManagerDelegate\n\nextension ViewController: CLLocationManagerDelegate {\n    \n}\n\n//MARK: - MKMapViewDelegate\n\nextension ViewController: MKMapViewDelegate {\n    /*\n    func mapView(_ mapView: MKMapView, didUpdate userLocation: MKUserLocation) {\n        \n        let region = MKCoordinateRegion(center: mapView.userLocation.coordinate, span: MKCoordinateSpan(latitudeDelta: 0.2, longitudeDelta: 0.2))\n        \n        mapView.setRegion(region, animated: true)\n    }*/\n    \n    func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {\n        if annotation is MKUserLocation { //사용자 위치엔 적용을 배재하기위한 로직\n            return nil\n        }\n        \n        var annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: \"Annotation\") as? MKMarkerAnnotationView\n        \n        if annotationView == nil {\n            annotationView = MKMarkerAnnotationView(annotation: annotation, reuseIdentifier: \"Annotation\")\n//            annotationView?.glyphText = \"✈️\"\n//            annotationView?.glyphImage //imgae 삽입옵션\n//            annotationView?.markerTintColor = .blue\n//            annotationView?.glyphTintColor = .white //annotation안의 텍스트의 색상옵션\n            \n            annotationView?.canShowCallout = false\n        }else{\n            annotationView?.annotation = annotation\n        }\n        \n//        if let isAnnotation = annotation as? Annotation {\n//            annotationView?.image = UIImage(imageLiteralResourceName: isAnnotation.imageURL)\n//        }\n        \n        //configureView(annotationView)\n        \n        return annotationView\n    }\n    \n    func mapView(_ mapView: MKMapView, didSelect view: MKAnnotationView) {\n        \n        guard let annotation = view.annotation as? Annotation else {\n            return\n        }\n        \n        let customCalloutView = UIView(frame: CGRect.zero)\n        customCalloutView.translatesAutoresizingMaskIntoConstraints = false\n        customCalloutView.layer.cornerRadius = 10.0\n        customCalloutView.layer.masksToBounds = true\n        customCalloutView.backgroundColor = .blue\n        \n        view.addSubview(customCalloutView)\n        \n        customCalloutView.bottomAnchor.constraint(equalTo: view.topAnchor, constant: -5).isActive = true\n        customCalloutView.centerXAnchor.constraint(equalTo: view.centerXAnchor).isActive = true\n        customCalloutView.widthAnchor.constraint(equalToConstant: 150).isActive = true\n        customCalloutView.heightAnchor.constraint(equalToConstant: 80).isActive = true\n        \n        let titleLabel = UILabel(frame: CGRect.zero)\n        titleLabel.textColor = .white\n        titleLabel.text = annotation.title\n        titleLabel.translatesAutoresizingMaskIntoConstraints = false\n        \n        customCalloutView.addSubview(titleLabel)\n        \n        titleLabel.centerXAnchor.constraint(equalTo: customCalloutView.centerXAnchor).isActive = true\n        titleLabel.centerYAnchor.constraint(equalTo: customCalloutView.centerYAnchor).isActive = true\n        titleLabel.widthAnchor.constraint(equalToConstant: 100).isActive = true\n        titleLabel.heightAnchor.constraint(equalToConstant: 44).isActive = true\n    }\n    \n    \n}\n\n//MARK: - ConfigureSubviewsCase\n\nextension ViewController: ConfigureSubviewsCase {\n    func configureSubviews() {\n        createSubviews()\n        addSubviews()\n        setupLayouts()\n    }\n    \n    func createSubviews() {\n        mapView = MKMapView(frame: view.frame)\n        mapSegment = UISegmentedControl(items: [\"Maps\", \"Satellite\", \"Hybrid\"])\n        addAnnotation = UIButton()\n    }\n    \n    func addSubviews() {\n        view.addSubview(mapView)\n        view.addSubview(mapSegment)\n        view.addSubview(addAnnotation)\n    }\n    \n    func setupLayouts() {\n        setupSubviewsLayouts()\n        setupSubviewsConstraints()\n    }\n    \n    \n}\n\nextension ViewController: SetupSubviewsLayouts {\n    func setupSubviewsLayouts() {\n        mapView.showsUserLocation = true\n        mapView.delegate = self\n        \n        mapSegment.frame = CGRect(x: 0, y: 0, width: 100, height: 30)\n        mapSegment.selectedSegmentIndex = 0\n        mapSegment.addTarget(self, action: #selector(changedMapStyl), for: .valueChanged)\n        \n        addAnnotation.setTitle(\"Add Annotation\", for: .normal)\n        addAnnotation.backgroundColor = .systemBlue\n        addAnnotation.tintColor = .white\n        addAnnotation.layer.cornerRadius = 10\n        addAnnotation.addTarget(self, action: #selector(addAnnotationButtonPressed), for: .touchUpInside)\n    }\n    \n    \n}\n\nextension ViewController: SetupSubviewsConstraints {\n    func setupSubviewsConstraints() {\n        mapSegment.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            mapSegment.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor),\n            mapSegment.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 15),\n            mapSegment.widthAnchor.constraint(equalToConstant: 200),\n            mapSegment.heightAnchor.constraint(equalToConstant: 50)\n        ])\n        \n        addAnnotation.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            addAnnotation.bottomAnchor.constraint(equalTo: view.safeAreaLayoutGuide.bottomAnchor),\n            addAnnotation.centerXAnchor.constraint(equalTo: view.centerXAnchor)\n        ])\n    }\n    \n}\n\n"},{"name":"ConfigureSubviewsCase.swift","symbols":[{"range":{"start":{"line":10,"character":0},"end":{"line":24,"character":1}},"kind":11,"selectionRange":{"start":{"line":10,"character":9},"end":{"line":10,"character":30}},"name":"ConfigureSubviewsCase","children":[{"range":{"start":{"line":14,"character":4},"end":{"line":14,"character":28}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":28}},"name":"configureSubviews()"},{"range":{"start":{"line":17,"character":4},"end":{"line":17,"character":25}},"kind":6,"selectionRange":{"start":{"line":17,"character":9},"end":{"line":17,"character":25}},"name":"createSubviews()"},{"range":{"start":{"line":20,"character":4},"end":{"line":20,"character":22}},"kind":6,"selectionRange":{"start":{"line":20,"character":9},"end":{"line":20,"character":22}},"name":"addSubviews()"},{"range":{"start":{"line":23,"character":4},"end":{"line":23,"character":23}},"kind":6,"selectionRange":{"start":{"line":23,"character":9},"end":{"line":23,"character":23}},"name":"setupLayouts()"}]},{"range":{"start":{"line":26,"character":0},"end":{"line":31,"character":1}},"kind":11,"selectionRange":{"start":{"line":26,"character":9},"end":{"line":26,"character":29}},"name":"SetupSubviewsLayouts","children":[{"range":{"start":{"line":29,"character":4},"end":{"line":29,"character":31}},"kind":6,"selectionRange":{"start":{"line":29,"character":9},"end":{"line":29,"character":31}},"name":"setupSubviewsLayouts()"}]},{"range":{"start":{"line":33,"character":0},"end":{"line":38,"character":1}},"kind":11,"selectionRange":{"start":{"line":33,"character":9},"end":{"line":33,"character":33}},"name":"SetupSubviewsConstraints","children":[{"range":{"start":{"line":36,"character":4},"end":{"line":36,"character":35}},"kind":6,"selectionRange":{"start":{"line":36,"character":9},"end":{"line":36,"character":35}},"name":"setupSubviewsConstraints()"}]}],"code":"//\n//  ConfigureSubviewsCase.swift\n//  MapsTest\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport Foundation\n\n///UIView type's default configure\nprotocol ConfigureSubviewsCase {\n    \n    \n    /// Combine setupview's all configuration\n    func configureSubviews()\n\n    /// Init subviews\n    func createSubviews()\n\n    /// Add view to view's subview\n    func addSubviews()\n\n    /// Setup subview's layout\n    func setupLayouts()\n}\n\nprotocol SetupSubviewsLayouts {\n    \n    ///Use ConfigureUI.setupLayout(detail:apply:)\n    func setupSubviewsLayouts()\n    \n}\n\nprotocol SetupSubviewsConstraints {\n    \n    ///Use ConfigureUI.setupConstraints(detail:apply:)\n    func setupSubviewsConstraints()\n    \n}\n"},{"name":"AppDelegate.swift","symbols":[{"range":{"start":{"line":10,"character":0},"end":{"line":34,"character":1}},"kind":5,"selectionRange":{"start":{"line":10,"character":6},"end":{"line":10,"character":17}},"name":"AppDelegate","children":[{"range":{"start":{"line":14,"character":4},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":135}},"name":"application(_:didFinishLaunchingWithOptions:)"},{"range":{"start":{"line":21,"character":4},"end":{"line":25,"character":5}},"kind":6,"selectionRange":{"start":{"line":21,"character":9},"end":{"line":21,"character":153}},"name":"application(_:configurationForConnecting:options:)"},{"range":{"start":{"line":27,"character":4},"end":{"line":31,"character":5}},"kind":6,"selectionRange":{"start":{"line":27,"character":9},"end":{"line":27,"character":110}},"name":"application(_:didDiscardSceneSessions:)"}]}],"code":"//\n//  AppDelegate.swift\n//  MapsTest\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport UIKit\n\n@main\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\n\n\n    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        // Override point for customization after application launch.\n        return true\n    }\n\n    // MARK: UISceneSession Lifecycle\n\n    func application(_ application: UIApplication, configurationForConnecting connectingSceneSession: UISceneSession, options: UIScene.ConnectionOptions) -> UISceneConfiguration {\n        // Called when a new scene session is being created.\n        // Use this method to select a configuration to create the new scene with.\n        return UISceneConfiguration(name: \"Default Configuration\", sessionRole: connectingSceneSession.role)\n    }\n\n    func application(_ application: UIApplication, didDiscardSceneSessions sceneSessions: Set<UISceneSession>) {\n        // Called when the user discards a scene session.\n        // If any sessions were discarded while the application was not running, this will be called shortly after application:didFinishLaunchingWithOptions.\n        // Use this method to release any resources that were specific to the discarded scenes, as they will not return.\n    }\n\n\n}\n\n"},{"name":"Annotation.swift","symbols":[{"range":{"start":{"line":10,"character":0},"end":{"line":14,"character":1}},"kind":5,"selectionRange":{"start":{"line":10,"character":6},"end":{"line":10,"character":16}},"name":"Annotation","children":[{"range":{"start":{"line":12,"character":4},"end":{"line":12,"character":25}},"kind":7,"selectionRange":{"start":{"line":12,"character":8},"end":{"line":12,"character":16}},"name":"imageURL"}]}],"code":"//\n//  Annotation.swift\n//  MapsTest\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport Foundation\nimport MapKit\n\nclass Annotation: MKPointAnnotation {\n    \n    var imageURL: String!\n    \n}\n"},{"name":"SceneDelegate.swift","symbols":[{"range":{"start":{"line":9,"character":0},"end":{"line":50,"character":1}},"kind":5,"selectionRange":{"start":{"line":9,"character":6},"end":{"line":9,"character":19}},"name":"SceneDelegate","children":[{"range":{"start":{"line":11,"character":4},"end":{"line":11,"character":25}},"kind":7,"selectionRange":{"start":{"line":11,"character":8},"end":{"line":11,"character":14}},"name":"window"},{"range":{"start":{"line":14,"character":4},"end":{"line":19,"character":5}},"kind":6,"selectionRange":{"start":{"line":14,"character":9},"end":{"line":14,"character":125}},"name":"scene(_:willConnectTo:options:)"},{"range":{"start":{"line":21,"character":4},"end":{"line":26,"character":5}},"kind":6,"selectionRange":{"start":{"line":21,"character":9},"end":{"line":21,"character":45}},"name":"sceneDidDisconnect(_:)"},{"range":{"start":{"line":28,"character":4},"end":{"line":31,"character":5}},"kind":6,"selectionRange":{"start":{"line":28,"character":9},"end":{"line":28,"character":47}},"name":"sceneDidBecomeActive(_:)"},{"range":{"start":{"line":33,"character":4},"end":{"line":36,"character":5}},"kind":6,"selectionRange":{"start":{"line":33,"character":9},"end":{"line":33,"character":48}},"name":"sceneWillResignActive(_:)"},{"range":{"start":{"line":38,"character":4},"end":{"line":41,"character":5}},"kind":6,"selectionRange":{"start":{"line":38,"character":9},"end":{"line":38,"character":51}},"name":"sceneWillEnterForeground(_:)"},{"range":{"start":{"line":43,"character":4},"end":{"line":47,"character":5}},"kind":6,"selectionRange":{"start":{"line":43,"character":9},"end":{"line":43,"character":50}},"name":"sceneDidEnterBackground(_:)"}]}],"code":"//\n//  SceneDelegate.swift\n//  MapsTest\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport UIKit\n\nclass SceneDelegate: UIResponder, UIWindowSceneDelegate {\n\n    var window: UIWindow?\n\n\n    func scene(_ scene: UIScene, willConnectTo session: UISceneSession, options connectionOptions: UIScene.ConnectionOptions) {\n        // Use this method to optionally configure and attach the UIWindow `window` to the provided UIWindowScene `scene`.\n        // If using a storyboard, the `window` property will automatically be initialized and attached to the scene.\n        // This delegate does not imply the connecting scene or session are new (see `application:configurationForConnectingSceneSession` instead).\n        guard let _ = (scene as? UIWindowScene) else { return }\n    }\n\n    func sceneDidDisconnect(_ scene: UIScene) {\n        // Called as the scene is being released by the system.\n        // This occurs shortly after the scene enters the background, or when its session is discarded.\n        // Release any resources associated with this scene that can be re-created the next time the scene connects.\n        // The scene may re-connect later, as its session was not necessarily discarded (see `application:didDiscardSceneSessions` instead).\n    }\n\n    func sceneDidBecomeActive(_ scene: UIScene) {\n        // Called when the scene has moved from an inactive state to an active state.\n        // Use this method to restart any tasks that were paused (or not yet started) when the scene was inactive.\n    }\n\n    func sceneWillResignActive(_ scene: UIScene) {\n        // Called when the scene will move from an active state to an inactive state.\n        // This may occur due to temporary interruptions (ex. an incoming phone call).\n    }\n\n    func sceneWillEnterForeground(_ scene: UIScene) {\n        // Called as the scene transitions from the background to the foreground.\n        // Use this method to undo the changes made on entering the background.\n    }\n\n    func sceneDidEnterBackground(_ scene: UIScene) {\n        // Called as the scene transitions from the foreground to the background.\n        // Use this method to save data, release shared resources, and store enough scene-specific state information\n        // to restore the scene back to its current state.\n    }\n\n\n}\n\n"}]},{"name":"MapsTestUITests","files":[{"name":"MapsTestUITests.swift","symbols":[{"range":{"start":{"line":9,"character":6},"end":{"line":40,"character":1}},"kind":5,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":27}},"name":"MapsTestUITests","children":[{"range":{"start":{"line":11,"character":13},"end":{"line":18,"character":5}},"kind":6,"selectionRange":{"start":{"line":11,"character":18},"end":{"line":11,"character":34}},"name":"setUpWithError()"},{"range":{"start":{"line":20,"character":13},"end":{"line":22,"character":5}},"kind":6,"selectionRange":{"start":{"line":20,"character":18},"end":{"line":20,"character":37}},"name":"tearDownWithError()"},{"range":{"start":{"line":24,"character":4},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":24,"character":9},"end":{"line":24,"character":22}},"name":"testExample()","children":[{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":35}},"kind":13,"selectionRange":{"start":{"line":26,"character":12},"end":{"line":26,"character":15}},"name":"app"}]},{"range":{"start":{"line":32,"character":4},"end":{"line":39,"character":5}},"kind":6,"selectionRange":{"start":{"line":32,"character":9},"end":{"line":32,"character":32}},"name":"testLaunchPerformance()"}]}],"code":"//\n//  MapsTestUITests.swift\n//  MapsTestUITests\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport XCTest\n\nfinal class MapsTestUITests: XCTestCase {\n\n    override func setUpWithError() throws {\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n\n        // In UI tests it is usually best to stop immediately when a failure occurs.\n        continueAfterFailure = false\n\n        // In UI tests it’s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.\n    }\n\n    override func tearDownWithError() throws {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n    }\n\n    func testExample() throws {\n        // UI tests must launch the application that they test.\n        let app = XCUIApplication()\n        app.launch()\n\n        // Use XCTAssert and related functions to verify your tests produce the correct results.\n    }\n\n    func testLaunchPerformance() throws {\n        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 7.0, *) {\n            // This measures how long it takes to launch your application.\n            measure(metrics: [XCTApplicationLaunchMetric()]) {\n                XCUIApplication().launch()\n            }\n        }\n    }\n}\n"},{"name":"MapsTestUITestsLaunchTests.swift","symbols":[{"range":{"start":{"line":9,"character":6},"end":{"line":31,"character":1}},"kind":5,"selectionRange":{"start":{"line":9,"character":12},"end":{"line":9,"character":38}},"name":"MapsTestUITestsLaunchTests","children":[{"range":{"start":{"line":11,"character":13},"end":{"line":13,"character":5}},"kind":7,"selectionRange":{"start":{"line":11,"character":23},"end":{"line":11,"character":66}},"name":"runsForEachTargetApplicationUIConfiguration"},{"range":{"start":{"line":15,"character":13},"end":{"line":17,"character":5}},"kind":6,"selectionRange":{"start":{"line":15,"character":18},"end":{"line":15,"character":34}},"name":"setUpWithError()"},{"range":{"start":{"line":19,"character":4},"end":{"line":30,"character":5}},"kind":6,"selectionRange":{"start":{"line":19,"character":9},"end":{"line":19,"character":21}},"name":"testLaunch()","children":[{"range":{"start":{"line":20,"character":8},"end":{"line":20,"character":35}},"kind":13,"selectionRange":{"start":{"line":20,"character":12},"end":{"line":20,"character":15}},"name":"app"},{"range":{"start":{"line":26,"character":8},"end":{"line":26,"character":68}},"kind":13,"selectionRange":{"start":{"line":26,"character":12},"end":{"line":26,"character":22}},"name":"attachment"}]}]}],"code":"//\n//  MapsTestUITestsLaunchTests.swift\n//  MapsTestUITests\n//\n//  Created by 이치훈 on 2023/04/07.\n//\n\nimport XCTest\n\nfinal class MapsTestUITestsLaunchTests: XCTestCase {\n\n    override class var runsForEachTargetApplicationUIConfiguration: Bool {\n        true\n    }\n\n    override func setUpWithError() throws {\n        continueAfterFailure = false\n    }\n\n    func testLaunch() throws {\n        let app = XCUIApplication()\n        app.launch()\n\n        // Insert steps here to perform after app launch but before taking a screenshot,\n        // such as logging into a test account or navigating somewhere in the app\n\n        let attachment = XCTAttachment(screenshot: app.screenshot())\n        attachment.name = \"Launch Screen\"\n        attachment.lifetime = .keepAlways\n        add(attachment)\n    }\n}\n"}]}]}}